import json

# Load unit stats from config
with open("config/army_stats.json", "r") as f:
    UNIT_STATS = json.load(f)


def calculate_battle_outcome(
    player_army: dict[str, int], target_army: dict[str, int]
) -> tuple[str, str]:
    """
    Calculates the outcome of a battle between two armies.

    Returns:
        outcome (str): "Victory", "Defeat", or "Draw"
        battle_log (str): summary of power and casualties
    """
    # Compute total attack power
    player_power = sum(
        UNIT_STATS.get(unit, {
  "soldier": {
    "display_name": "Soldier",
    "attack": 10,
    "defense": 5,
    "hp": 50,
    "speed": 10,
    "role": "infantry",
    "training_time": 1,
    "tactics": ["melee", "flanking"]
  },
  "tank": {
    "display_name": "Tank",
    "attack": 40,
    "defense": 30,
    "hp": 200,
    "speed": 5,
    "role": "heavy",
    "training_time": 5,
    "tactics": ["breakthrough", "siege"]
  },
  "drone": {
    "display_name": "Drone",
    "attack": 25,
    "defense": 15,
    "hp": 100,
    "speed": 15,
    "role": "ranged",
    "training_time": 3,
    "tactics": ["skirmish", "ambush"]
  },
  "artillery": {
    "display_name": "Artillery",
    "attack": 50,
    "defense": 10,
    "hp": 80,
    "speed": 3,
    "role": "siege",
    "training_time": 7,
    "tactics": ["bombardment", "siege"]
  },
  "scout": {
    "display_name": "Scout",
    "attack": 5,
    "defense": 20,
    "hp": 60,
    "speed": 20,
    "role": "recon",
    "training_time": 2,
    "tactics": ["reconnaissance", "flanking"]
  }
} unit(s)."
    )

    return outcome, battle_log


def calculate_battle_rewards(
    outcome: str,
    player_army: dict[str, int],
    target_army: dict[str, int]
) -> str:
    """
    Determines resource rewards or penalties based on battle outcome.

    Returns:
        str: human-readable rewards description
    """
    if outcome == "Victory":
        # Flat rewards
        return "500 Metal, 300 Fuel, 50 Crystals"
    elif outcome == "Defeat":
        # Penalty description (actual deduction handled elsewhere)
        return "Penalty: 10% of your total resources lost."
    else:
        return "No rewards (Draw)."
