# handlers/admin.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from modules.admin import admin_commands
from utils.format import section_header

async def handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = str(update.effective_user.id)
    args = context.args

    # Check if user is an admin
    admins = get_rows("Admins")
    is_admin = any(row[0] == uid for row in admins[1:])

    if not is_admin:
        await update.message.reply_text(
            "❌ *Access Denied* ❌\n\n"
            "You do not have administrative privileges!",
            parse_mode="Markdown"
        )
        return

    if not args:
        kb = [[InlineKeyboardButton(f"Execute {cmd.name}", callback_data=f"admin_{i}")] for i, cmd in enumerate(admin_commands)]
        kb.append([InlineKeyboardButton("Close", callback_data="close")])

        await update.message.reply_text(
            f"{section_header('ADMIN COMMANDS', '👑')}\n\n"
            "Select an admin command to execute:\n\n" +
            "\n".join([f"{i+1}. {cmd.name}: {cmd.description}" for i, cmd in enumerate(admin_commands)]),
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(kb)
        )
        return

    action = args[0].lower()
    if action == "reset_player" and len(args) > 1:
        target_id = args[1]
        # Implement actual reset logic here
        await update.message.reply_text(
            f"👑 *Admin Action* 👑\n\n"
            f"Player {target_id} data reset!",
            parse_mode="Markdown"
        )
    elif action == "grant_resources" and len(args) > 1:
        target_id = args[1]
        amount = args[2] if len(args) > 2 else "1000"
        # Implement actual resource grant logic here
        await update.message.reply_text(
            f"👑 *Admin Action* 👑\n\n"
            f"Granted resources to {target_id}!",
            parse_mode="Markdown"
        )
    elif action == "manage_event" and len(args) > 1:
        event_name = " ".join(args[1:])
        # Implement actual event management logic here
        await update.message.reply_text(
            f"👑 *Admin Action* 👑\n\n"
            f"Event '{event_name}' managed!",
            parse_mode="Markdown"
        )